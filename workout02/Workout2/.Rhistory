if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i = 0
while(vec[i+2] %in% LETTERS){
dist = dist + distances[vec[i], vec[i+1]]
i = i + 1
print(vec[i])
print(dist)
}
return (dist)
}
get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i = 0
while(vec[i+2] %in% LETTERS){
dist = dist + distances[vec[i], vec[i+1]]
i = i + 1
print(distances[vec[i], vec[i+1]])
print(dist)
}
return (dist)
}
get_dist(distances, vec)
View(get_dict)
View(get_dict)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <-  0
while(vec[i+2] %in% LETTERS){
dist <- dist + distances[vec[i], vec[i+1]]
i = i + 1
print(distances[vec[i], vec[i+1]])
print(dist)
}
return (dist)
}
vec <- c('E', 'D', 'A')
get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <-  0
while(vec[i+2] %in% LETTERS){
dist <- dist + distances[vec[i], vec[i+1]]
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
get_dist(distances, vec)
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <-  0
while(vec[i+2] %in% LETTERS){
dist <- distances[vec[i], vec[i+1]]
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <-  0
while(vec[i+2] %in% LETTERS){
dist <- distances[vec[i], vec[i+1]] + dist
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <-  0
while(vec[i+2] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- dist + distance
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- dist + distance
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- dist + distance
i = i + 1
print(distance)
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- dist + distance
i = i + 1
print(distance)
print(typeof(distance))
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0.0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- dist + distance
i = i + 1
print(distance)
print(typeof(distance))
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0.0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- distance + dist
i = i + 1
print(distance)
print(typeof(distance))
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0.0
i <- 0
while(vec[i+1] %in% LETTERS){
distance <- distances[vec[i], vec[i+1]]
dist <- distance + dist
i = i + 1
print(vec[i])
print(distance)
print(typeof(distance))
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 1
while(vec[i+1] %in% LETTERS){
dist <- dist + distances[vec[i], vec[i+1]]
i = i + 1
}
return (dist)
}
p <- get_dist(distances, vec)
get_dist(distances, vec)
err <- c('E', 'D', ')')
err <- c('E', 'D', ')')
get_dist(distances, err)
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
lets <- LETTERS
first <- c('T', 'Y', 'L', 'E', 'R')
last <- c('C', 'H', 'O', 'E')
get_dist(distances, cal)
zzz <- rep('Z', 3)
get_dist(distances, cal)
get_dist(distances, stats)
get_dist(distances, oksi)
get_dist(distances, cal)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 1
while(vec[i+1] %in% LETTERS){
dist <- dist + distances[vec[i], vec[i+1]]
i = i + 1
}
return (dist)
}
vec <- c('E', 'D', 'A')
get_dist(distances, vec)
err <- c('E', 'D', ')')
get_dist(distances, err)
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c('T', 'Y', 'L', 'E', 'R')
last <- c('C', 'H', 'O', 'E')
get_dist(distances, cal)
get_dist(distances, stats)
get_dist(distances, oski)
get_dist(distances, zzz)
get_dist(distances, lets)
get_dist(distances, first)
get_dist(distances, last)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 1
while(ltrs[i+1] %in% LETTERS){
dist <- dist + distances[ltrs[i], ltrs[i+1]]
i = i + 1
}
return (dist)
}
get_dist(distances, vec)
err <- c('E', 'D', ')')
get_dist(distances, err)
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
get_dist(distances, cal)
get_dist(distances, stats)
get_dist(distances, oski)
get_dist(distances, zzz)
get_dist(distances, lets)
get_dist(distances, first)
get_dist(distances, last)
get_dist <- function(distances, ltrs){
for (letter in ltrs){
if (!(letter %in% LETTERS)){
stop("Unrecognized character")
}
}
dist <- 0
i <- 1
while(ltrs[i+1] %in% LETTERS){
dist <- dist + distances[ltrs[i], ltrs[i+1]]
i = i + 1
}
return (dist)
}
install.packages("testthat")
library(testthat)
knitr::opts_chunk$set(echo = TRUE)
states <- rownames(USArrests)
paste(states[1:5], len(states[1:5]), sep = ' = ')
paste(states[1:5], length(states[1:5]), sep = ' = ')
paste(states[1:5], lengths(states[1:5]), sep = ' = ')
states <- rownames(USArrests)
paste(states[1:5], sapply(states[1:5], length), sep = ' = ')
paste(states[1:5], sapply(states[1:5], nchar), sep = ' = ')
paste(states[1:5], collapse = "")
paste(states[1:5], nchar(states[1:5]), sep = ' = ')
paste(states[1:5], collapse = "")
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
permutations(c('A', 'L', 'A', 'B', 'A', 'M', 'A'))
permutations('ALABAMA')
factorial(7)/factorial(4)
to_celsius <- function(x=1){
(x-32)*(5/9)
}
to_kelvin <- function(x=1){
(x+459.67)*(5/9)
}
to_reaumur <- function(x=1){
(x-32)*(4/9)
}
to_rankine <- function(x=1){
x+459.67
}
temp_convert(30, 'celsius')
temp_convert <- function(x=1, to="celsius"){
to <- tolower(to)
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
for (i in for_csv_vect) {
for_csv_vect[i] <- paste(c('file', i, '.csv'), sep = "")
}
for_csv_vect <- 1:10
for (i in for_csv_vect) {
for_csv_vect[i] <- paste(c('file', i, '.csv'), sep = "")
}
for_csv_vect[i] <- paste0(c('file', i, '.csv')
}
for (i in for_csv_vect) {
for_csv_vect <- 1:10
for (i in for_csv_vect) {
for (i in for_csv_vect){
for (i in for_csv_vect){
for_csv_vect[i] <- paste0(c('file', i, '.csv'))
}
for (i in for_csv_vect){
for_csv_vect[i] <- paste0('file', i, '.csv')
}
for_csv_vect
for_csv_vect <- 1:10
for (i in for_csv_vect){
for_csv_vect[i] <- paste0('file', i, '.csv')
}
for
for_csv_vect
paste_csv_vect <- paste0('file', 1:10, '.csv')
paste_csv_vect
k <- 1
while_csv_vect <- 1:10
while(k<11){
while_csv_vect[i] <- paste0('file', i, '.csv')
}
k <- 1
while_csv_vect <- 1:10
while(k<11){
while_csv_vect[k] <- paste0('file', k, '.csv')
k <- k+1
}
while_csv_vect
help("substr")
paste_csv_vect <- paste0(dataset, substr(paste_csv_vect, 5, nchar(paste_csv_vect)))
paste_csv_vect <- paste0('dataset', substr(paste_csv_vect, 5, nchar(paste_csv_vect)))
paste_csv_vect
# name of output file
outputfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n", file = outfile, append = TRUE)
cat("---", file = outfile)
cat("title: Output", file = outfile, append = TRUE)
cat("author: Tyler Choe", file = outfile, append = TRUE)
cat("date: April 05, 2019", file = outfile, append = TRUE)
cat("output: html_document", file = outfile, append = TRUE)
cat("---", file = outfile, append = TRUE)
# writing to 'outfile.txt'
cat("---\n", file = outfile)
cat("title: Output\n", file = outfile, append = TRUE)
cat("author: Tyler Choe\n", file = outfile, append = TRUE)
cat("date: April 05, 2019\n", file = outfile, append = TRUE)
cat("output: html_document\n", file = outfile, append = TRUE)
cat("---\n\n", file = outfile, append = TRUE)
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n", file = outfile, append = TRUE)
# writing to 'outfile.txt'
cat("---\n", file = outfile)
cat("title: Output\n", file = outfile, append = TRUE)
cat("author: Tyler Choe\n", file = outfile, append = TRUE)
cat("date: April 05, 2019\n", file = outfile, append = TRUE)
cat("output: html_document\n", file = outfile, append = TRUE)
cat("---\n\n", file = outfile, append = TRUE)
cat("This is the first line", file = outfile, append = TRUE)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n", file = outfile, append = TRUE)
is_color <- function(color){
color %in% colors()
}
is_color('yellow')
is_color('blu')
is_color('turkuoise')
shiny::runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
shiny::runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
knitr::opts_chunk$set(echo = TRUE)
df = data.frame(year = c(1, 2, 3, 4, 5),
no = c('a', 'b', 'c', 'd', 'e'),
fixed = c('f', 'g', 'h', 'i', 'j'))
melted = melt(df, id.vars = year)
df
melted = melt(df, id.vars = 'year')
melted
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
df = data.frame(year = c(1, 2, 3, 4, 5),
no = c(100, 200, 300, 400, 500),
fixed = c(600, 700, 800, 900, 1000),
growing = c(11, 12, 13, 14, 15))
melted = melt(df, id.vars = 'year')
melted
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
runApp('C:/Users/tyler/STAT 133/STAT 133 HW/workout2/Workout2')
